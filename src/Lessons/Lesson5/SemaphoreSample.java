package Lessons.Lesson5;

import java.util.concurrent.Semaphore;

public class SemaphoreSample {
  public static void main(String[] args) {
    //В качестве объекта по которому у нас происходит синхронизация выступает Semaphore()
    //Semaphore semaphore = new Semaphore(1); //кол одновременно работающих потоков с этим объектом

    //Semaphore semaphore = new Semaphore(1,true); //кол одновременно работающих потоков с этим объектом и булевый флаг
    //если true - симафор будет помнить порядок обращения к себе обращение потоков и также отдавать блокировку потока в той же очередности будет.

    Semaphore semaphore = new Semaphore(3);
    for (int i = 0; i < 5; i++) {
      final int w = i;
      new Thread(() -> {
        System.out.println("Поток"+w+" остановился перед семафором");
        try {
          Thread.sleep(3000);
          semaphore.acquire();//заблокируем семафор, у acquire() можно указать количество блокировок семафора (acquire(3)) которые заберет поток
          Thread.sleep(5000);
          System.out.println("Поток" + w + " заблокировал семафор");
        } catch (InterruptedException e) {
          e.printStackTrace();
        }finally {
          System.out.println("Поток"+w+" освободил семафор");
          semaphore.release();//разблокируем семафор, если забрали 3 блокировки то и отпустить должны 3 - release(3)
        }
      }).start();
    }
    //Поток0 остановился перед семафором
    //Поток3 остановился перед семафором
    //Поток2 остановился перед семафором
    //Поток1 остановился перед семафором
    //Поток4 остановился перед семафором
    //Поток0 заблокировал семафор
    //Поток3 заблокировал семафор
    //Поток3 освободил семафор
    //Поток0 освободил семафор
    //Поток2 заблокировал семафор
    //Поток2 освободил семафор
    //Поток4 заблокировал семафор
    //Поток4 освободил семафор
    //Поток1 заблокировал семафор
    //Поток1 освободил семафор

  }
}
